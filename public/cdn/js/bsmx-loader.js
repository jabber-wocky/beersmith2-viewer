function loadXMLDoc(filename){    var xhttp;    if (window.ActiveXObject)      {      xhttp = new ActiveXObject("Msxml2.XMLHTTP");      }    else      {      xhttp = new XMLHttpRequest();      }    xhttp.open("GET", filename, false);    try {xhttp.responseType = "msxml-document"} catch(err) {} // Helping IE11    xhttp.send("");    return parseXml(xhttp.responseText);}function loadXSLDoc(filename){    var xhttp;    if (window.ActiveXObject)      {      xhttp = new ActiveXObject("Msxml2.XMLHTTP");      }    else      {      xhttp = new XMLHttpRequest();      }    xhttp.open("GET", filename, false);    try {xhttp.responseType = "msxml-document"} catch(err) {} // Helping IE11    xhttp.send("");    return xhttp.responseXML;}function getCalc() {  var inside = $("#recipe-details").html();  var results = inside.match(/!@#[^!]*!@#/gm);  for (result in results) {    var original = results[result];    var script = original.replace(/!@#/g,"");    eval(script);    var color = 0;	var og = 0;	var fg = 0;		var grains = calc.grains;	//calc og	// og += lbs * ppg * mash efficiency / volume	// http://www.howtobrew.com/section2/chapter12-3.html	for (key in grains) {		og += ( (Math.round(grains[key]['weight']*10)/10) * (46 * (grains[key]['yield'])/100) * (grains[key]['ee']) / (Math.round(grains[key]['volume']*100)/100) );		fg = grains[key]['fg'];    }	og = Math.round(og);	inside = inside.replace("$$OG$$", "1." + ("00000"+og).substr(-3) + " SG");	inside = inside.replace("$$FG$$", "1."+ ("0000"+Math.round(fg*1000)).substr(-3) +" SG"); //Math.round(fg*1000)/1000	og = (og / 1000) + 1;	inside = inside.replace("$$ABV$$", (Math.round((og-fg)*131.25*100) / 100) + "%");		//round((F_R_DESIRED_OG - F_R_OG_SECONDARY)*131.25*100) div 100		// calc color	for (key in grains) {		color += ( (Math.round(grains[key]['color'])) * (Math.round(grains[key]['weight']*10)/10) / (Math.round(grains[key]['volume']*100)/100) );    }    color = 1.4922 * (Math.pow(color,0.6859));    inside = inside.replace("$$color$$", Math.round(color*10)/10+" SRM");		var sparge = calc.sparge;	if (sparge.type == 1) {		var steps = [];		var total_water = sparge.pre_boil_water;		var grain_water_abs = sparge.grain_weight * 0.12;				var max_mash_vol = sparge.mash_tun_vol * (sparge.percentage/100) - (0.19838 * sparge.grain_weight);		var even_mash_step = even_mash_step = total_water / Math.ceil((total_water+grain_water_abs)/max_mash_vol);;				if (sparge.drain == 1) {			steps.push('Drain mash tun');			total_water = total_water - sparge.mash_water + grain_water_abs;						even_mash_step = total_water / Math.ceil(total_water/max_mash_vol);		}		else {			if (sparge.even == 0) {				steps.push( Math.round( ( Math.min(total_water, max_mash_vol) + grain_water_abs - sparge.mash_water ) * 100) / 100) ;				total_water = sparge.pre_boil_water - ( Math.round( ( Math.min(total_water, max_mash_vol) + grain_water_abs - sparge.mash_water ) * 100) / 100) - sparge.mash_water + grain_water_abs;			}			else {				steps.push(Math.round((even_mash_step + grain_water_abs - sparge.mash_water) * 100) / 100);				total_water -= Math.round((even_mash_step + grain_water_abs - sparge.mash_water) * 100) / 100;			}		}				for(var x = 0; x < Math.ceil(total_water/max_mash_vol); x++) {			if (sparge.even == 0) {				if (total_water < max_mash_vol) {					steps.push(Math.round(total_water * 100) / 100);					total_water -= Math.round(total_water * 100) / 100;				}				else {					steps.push(Math.round(max_mash_vol * 100) / 100);					total_water -= Math.round(max_mash_vol * 100) / 100;				}			}			else {				steps.push(Math.round(even_mash_step * 100) / 100);				total_water -= Math.round(even_mash_step * 100) / 100;			}		}				inside = inside.replace("$$batch-steps-no$$", JSON.stringify(steps.length));		var steps_str = "";		for (var s in steps) {			steps_str += '<span class data-unit="imperial">'+steps[s]+' gal</span><span data-unit="metric">'+ (Math.round(steps[s] * 3.78541 * 10) / 10) +'L</span>, ';		}		inside = inside.replace("$$batch-steps-vols$$", steps_str.substring(0,steps_str.length-2));				//inside = inside.replace("$$batch-steps-vols$$", JSON.stringify(steps));	}	  }  $("#recipe-details").html(inside);}function replaceAll(find, replace, str) {  return str.replace(new RegExp(find, 'g'), replace);}function htmlDecode(input){  var e = document.createElement('textarea');  e.innerHTML = input;  var result = "";  result = replaceAll("&"," &amp; ", e.value);  result = replaceAll(" < "," &lt; ", result);  result = replaceAll(" > "," &gt; ", result);  result = replaceAll("","", result);  return result;}function parseXml(xmlStr){    xmlStr = htmlDecode(xmlStr);    if (window.DOMParser) {        return ( new window.DOMParser() ).parseFromString(xmlStr, "text/xml");    } else if (typeof window.ActiveXObject != "undefined" && new window.ActiveXObject("Microsoft.XMLDOM")) {        var xmlDoc = new window.ActiveXObject("Microsoft.XMLDOM");        xmlDoc.async = "false";        xmlDoc.loadXML(xmlStr);        return xmlDoc;    }    return null;}function displayMenu() {	if (typeof page_urls !== 'undefined') {		var index = page_urls.index || "index.html";		var ingredients = page_urls.ingredients || "ingredients.html";		var recipes = page_urls.recipes || "recipes.html";		var setup = page_urls.setup || "setup.html";				$(".navbar-brand").attr('href',page_urls.index);				var new_html = $(".navbar-nav").html();		new_html = new_html.replace("setup.html",setup);		new_html = new_html.replace("recipes.html",recipes);		new_html = new_html.replace("ingredients.html",ingredients);		$(".navbar-nav").html(new_html);	}}function displayRecipes(xml_urls){  if (xml_urls.recipes && $("#recipe-list").length) {    xml = loadXMLDoc(xml_urls.recipes);    xsl = loadXSLDoc("/cdn/xsl/recipes.xsl");    xsltProcessor = new XSLTProcessor();    xsltProcessor.importStylesheet(xsl);    resultDocument = xsltProcessor.transformToFragment(xml, document);    document.getElementById("recipe-list").appendChild(resultDocument);    getCalc();  }}function displayIngredients(xml_urls) {	if ($("#ingredients-list").length) {		$("#ingredients-list").hide();		displayHops(xml_urls);		displayGrains(xml_urls);		displayYeasts(xml_urls);		loadUnitToggle();		$("#ingredients-list").show();	}}function displayHops(xml_urls){  if (xml_urls.hops && $("#hops-list").length) {    xml = loadXMLDoc(xml_urls.hops);    xsl = loadXSLDoc("/cdn/xsl/hops.xsl");    xsltProcessor = new XSLTProcessor();    xsltProcessor.importStylesheet(xsl);    resultDocument = xsltProcessor.transformToFragment(xml, document);    document.getElementById("hops-list").appendChild(resultDocument);  }}function displayGrains(xml_urls){  if (xml_urls.grains && $("#grains-list").length) {    xml = loadXMLDoc(xml_urls.grains);    xsl = loadXSLDoc("/cdn/xsl/grains.xsl");        xsltProcessor = new XSLTProcessor();    xsltProcessor.importStylesheet(xsl);    resultDocument = xsltProcessor.transformToFragment(xml, document);    document.getElementById("grains-list").appendChild(resultDocument);  }}function displayYeasts(xml_urls){  if (xml_urls.yeasts && $("#yeasts-list").length) {    xml = loadXMLDoc(xml_urls.yeasts);    xsl = loadXSLDoc("/cdn/xsl/yeasts.xsl");    xsltProcessor = new XSLTProcessor();    xsltProcessor.importStylesheet(xsl);    resultDocument = xsltProcessor.transformToFragment(xml, document);    document.getElementById("yeasts-list").appendChild(resultDocument);  }}function displayRecipesList(xml_urls){  if (xml_urls.recipes && $("#recipes-list").length) {    xml = loadXMLDoc(xml_urls.recipes);    xsl = loadXSLDoc("/cdn/xsl/recipes-list.xsl");    xsltProcessor = new XSLTProcessor();    xsltProcessor.importStylesheet(xsl);    	if ((typeof page_urls !== 'undefined') && (typeof page_urls.recipe_details !== 'undefined'))  {		xsltProcessor.setParameter(null, "path", page_urls.recipe_details);	} else {		xsltProcessor.setParameter(null, "path", "recipe-details.html");	}	resultDocument = xsltProcessor.transformToFragment(xml, document);    document.getElementById("recipes-list").appendChild(resultDocument);  }}function displayRecipeDetails(xml_urls){  if (xml_urls.recipes && $("#recipe-details").length) {    if(window.location.hash) {	  	  $("#recipe-details").hide();	        var hash = decodeURI(window.location.hash);      var folder = hash.substring(hash.indexOf("folder=")+7,hash.indexOf("recipe="));      var recipe = hash.substring(hash.indexOf("recipe=")+7,hash.length);      xml = loadXMLDoc(xml_urls.recipes);      xsl = loadXSLDoc("/cdn/xsl/recipe-details.xsl");      xsltProcessor = new XSLTProcessor();      xsltProcessor.importStylesheet(xsl);      xsltProcessor.setParameter(null, "folder", folder);      xsltProcessor.setParameter(null, "recipe", recipe);      resultDocument = xsltProcessor.transformToFragment(xml, document);      document.getElementById("recipe-details").appendChild(resultDocument);	  	  $(".note").each(function () {		$(this).html($(this).html().replace(/\n/g,"<br />"));	  });	  getCalc();	  	  	  loadUnitToggle();      	  	  $("#recipe-details").show();    }  }}function loadUnitToggle() {	// load scripts	//$("head").append('<link href="/cdn/css/bootstrap-switch.min.css" rel="stylesheet">');	//$("body").append('<script src="/cdn/js/bootstrap-switch.min.js"></script>');			$("head").append('<link href="/cdn/css/bootstrap-switch.min.css" rel="stylesheet">');		$.getScript('/cdn/js/bootstrap-switch.min.js', function() {			// add switcher to dom		var unit_switcher = $('<ul class="nav navbar-nav navbar-right"><li><input type="checkbox" name="unit-checkbox" /></li></ul>');		$(".navbar-collapse").append(unit_switcher);				// init		$("[name='unit-checkbox']").bootstrapSwitch();		$("[name='unit-checkbox']").bootstrapSwitch('onText','Metric');		$("[name='unit-checkbox']").bootstrapSwitch('offText','Imp.');		$("[name='unit-checkbox']").bootstrapSwitch('offColor','warning');		$("[name='unit-checkbox']").bootstrapSwitch('state',($.cookie("unit")=="metric" ? true : false));		UnitRefresh();				// event		$("[name='unit-checkbox']").bootstrapSwitch('onSwitchChange', function (event, state) {			$.cookie("unit", (state ? "metric" : "imperial"));			UnitRefresh();		});		});}function UnitRefresh() {	if (!$.cookie("unit")) {		$.cookie("unit", "imperial");	}	$("span[data-unit]").hide();	$("span[data-unit="+$.cookie("unit")+"]").show();}function beersmithViewerLoad(xml_urls) {	//$("body").append('<script src="/cdn/js/jquery.cookie.js"></script>');	$.getScript('/cdn/js/jquery.cookie.js');		displayMenu();	displayRecipes(xml_urls);	displayIngredients(xml_urls);	displayRecipesList(xml_urls);	displayRecipeDetails(xml_urls);}